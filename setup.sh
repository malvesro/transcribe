#!/bin/bash

# --- Configura√ß√µes ---
IMAGE_NAME="whisper-transcriber" # Escolha um nome para a sua imagem Docker
VIDEOS_DIR="videos"              # Nome da pasta onde os v√≠deos devem ser colocados
LOG_FILE="setup_whisper.log"     # Nome do arquivo de log

# Cores para sa√≠da no terminal
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# --- Fun√ß√£o de Logging ---
# log_message agora imprime uma vers√£o formatada para o console e uma vers√£o completa para o log
log_message() {
    local level="$1"
    local message="$2"
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")

    # Imprime no arquivo de log com timestamp e n√≠vel
    echo "${timestamp} [${level}] ${message}" | tee -a "$LOG_FILE" >/dev/null

    # Imprime no console (opcionalmente com cores e sem timestamp/n√≠vel)
    case "$level" in
        "INFO")
            echo -e "${BLUE}>>> ${message}${NC}"
            ;;
        "WARN")
            echo -e "${YELLOW}!!! Aten√ß√£o: ${message}${NC}"
            ;;
        "ERROR")
            echo -e "${RED}!!! ERRO: ${message}${NC}"
            ;;
        *) # Default para outros n√≠veis, se houver
            echo -e "${message}"
            ;;
    esac
}

# --- Configura√ß√£o de tratamento de erros global ---
set -e # Aborta o script em caso de erro

# Fun√ß√£o para ser executada em caso de erro
cleanup_on_error() {
    log_message "ERROR" "Ocorreu um erro inesperado durante o setup. Verifique o log para mais detalhes: ${LOG_FILE}"
    echo -e "\n${RED}-----------------------------------------------------${NC}"
    echo -e "${RED}üö® O Setup Falhou! Por favor, revise as mensagens acima e o log.${NC}"
    echo -e "${RED}-----------------------------------------------------${NC}\n"
    exit 1
}

trap 'cleanup_on_error' ERR # Captura o sinal de erro

# --- Fun√ß√£o para construir a imagem Docker ---
build_docker_image() {
    log_message "INFO" "Verificando imagem Docker '${IMAGE_NAME}'..."
    if docker image inspect "$IMAGE_NAME" &> /dev/null; then
        log_message "INFO" "${YELLOW}A imagem Docker '${IMAGE_NAME}' j√° existe localmente. Pulando o build.${NC}"
        return 0 # Sucesso (imagem j√° existe)
    fi

    log_message "INFO" "Iniciando o build da imagem Docker '${IMAGE_NAME}'. Isso pode levar alguns minutos..."
    if ! docker build -t "$IMAGE_NAME" -f Dockerfile .; then
        log_message "ERROR" "${RED}Falha no build da imagem Docker '${IMAGE_NAME}'. Verifique o Dockerfile.txt e a sa√≠da do build.${NC}"
        return 1 # Falha
    fi

    log_message "INFO" "${GREEN}Build da imagem Docker '${IMAGE_NAME}' conclu√≠do com sucesso!${NC}"
    return 0 # Sucesso
}

# --- Fun√ß√£o para criar a pasta de v√≠deos ---
create_videos_directory() {
    log_message "INFO" "Verificando a pasta de v√≠deos '${VIDEOS_DIR}'..."
    if [ ! -d "$VIDEOS_DIR" ]; then
        log_message "INFO" "Criando a pasta '${VIDEOS_DIR}' para seus v√≠deos..."
        if ! mkdir -p "$VIDEOS_DIR"; then
            log_message "ERROR" "${RED}Erro ao criar a pasta '${VIDEOS_DIR}'. Verifique as permiss√µes.${NC}"
            return 1 # Falha
        fi
        log_message "INFO" "${GREEN}Pasta '${VIDEOS_DIR}' criada com sucesso em $(pwd)/${VIDEOS_DIR}.${NC}"
    else
        log_message "INFO" "Pasta '${VIDEOS_DIR}' j√° existe em $(pwd)/${VIDEOS_DIR}."
    fi
    return 0 # Sucesso
}

# --- Fun√ß√£o para criar os aliases ---
create_aliases() {
    log_message "INFO" "Configurando aliases para a sess√£o atual..."
    # Alias para execu√ß√£o via CPU
    alias transcribe="docker run --rm -v \"\$(pwd)/$VIDEOS_DIR:/data\" $IMAGE_NAME"
    # Alias para execu√ß√£o via GPU (requer drivers NVIDIA e runtime Docker compat√≠vel)
    alias transcribegpu="docker run --rm --gpus all -v \"\$(pwd)/$VIDEOS_DIR:/data\" $IMAGE_NAME"
    log_message "INFO" "${GREEN}Aliases 'transcribe' e 'transcribegpu' definidos!${NC}"
}

# --- Fun√ß√£o para exibir o help ---
show_help() {
    # Usar vari√°veis com aspas duplas para garantir a expans√£o e cores
    local bashrc_path="${YELLOW}$HOME/.bashrc${NC}"
    local zshrc_path="${YELLOW}$HOME/.zshrc${NC}"
    local source_bashrc="${YELLOW}source $HOME/.bashrc${NC}"
    local source_zshrc="${YELLOW}source $HOME/.zshrc${NC}"
    local model_small_note="${YELLOW}O modelo 'small' ser√° usado por padr√£o${NC}, pois j√° est√° pr√©-carregado na imagem Docker. N√£o precisa especificar ${YELLOW}--model small${NC}."
    local transcribe_help_cmd="${YELLOW}\`transcribe --help\`${NC}"

    echo -e "
${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}
${CYAN}‚ú® Setup do Whisper Transcriber Conclu√≠do com Sucesso! ‚ú®${NC}
${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}

${GREEN}Os seguintes atalhos (aliases) foram criados para esta sess√£o do terminal:${NC}

1.  Alias: ${YELLOW}'transcribe'${NC} (para transcri√ß√£o via CPU)
    ${BLUE}Descri√ß√£o:${NC} Executa o Whisper usando o processador (CPU). Ideal para sistemas sem placa de v√≠deo NVIDIA ou quando a velocidade extrema n√£o √© o foco principal.
    ${BLUE}Exemplo de uso:${NC}
    ${GREEN}\$ transcribe --video meu_video_aula.mp4${NC}
    (${model_small_note})

2.  Alias: ${YELLOW}'transcribegpu'${NC} (para transcri√ß√£o via GPU)
    ${BLUE}Descri√ß√£o:${NC} Tenta executar o Whisper utilizando sua placa de v√≠deo NVIDIA (GPU) para maior velocidade. ${RED}Requer drivers NVIDIA instalados e o Docker configurado para usar GPUs.${NC}
    ${BLUE}Exemplo de uso:${NC}
    ${GREEN}\$ transcribegpu --video podcast.mp4 --model medium${NC}
    (Voc√™ pode especificar outros modelos, como ${YELLOW}'medium'${NC} ou ${YELLOW}'large'${NC}, para maior precis√£o, se sua GPU suportar.)

${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}
${CYAN}  Dicas Importantes para o Uso:                               ${NC}
${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}

* Substitua '${YELLOW}seu_video.mp4${NC}' pelo nome real do arquivo de v√≠deo que voc√™ quer transcrever.
* ${YELLOW}Coloque seus arquivos de v√≠deo dentro da pasta '${VIDEOS_DIR}'${NC} que foi criada no mesmo local deste script:
    ${GREEN}Caminho da pasta:${NC} $(pwd)/${VIDEOS_DIR}/
* Para ver todos os modelos dispon√≠veis, use: ${transcribe_help_cmd}
* ${RED}Aten√ß√£o:${NC} Esses atalhos s√£o ${YELLOW}TEMPOR√ÅRIOS${NC} e funcionar√£o apenas nesta sess√£o atual do terminal.
* Para torn√°-los ${GREEN}PERMANENTES${NC} (dispon√≠veis sempre que voc√™ abrir o terminal), ${GREEN}adicione as seguintes linhas${NC} ao final do seu arquivo ${bashrc_path} ou ${zshrc_path} (dependendo do seu shell):
    ${BLUE}alias transcribe='docker run --rm -v \"\$(pwd)/$VIDEOS_DIR:/data\" $IMAGE_NAME'${NC}
    ${BLUE}alias transcribegpu='docker run --rm --gpus all -v \"\$(pwd)/$VIDEOS_DIR:/data\" $IMAGE_NAME'${NC}
    Ap√≥s adicionar, salve o arquivo e execute: ${source_bashrc} ou ${source_zshrc}

${GREEN}üéâ Tudo pronto para suas transcri√ß√µes com Whisper! üéâ${NC}
"
}

# --- Execu√ß√£o Principal ---
main() {
    # Limpa o log anterior ao iniciar uma nova execu√ß√£o
    > "$LOG_FILE"
    log_message "INFO" "Iniciando a configura√ß√£o automatizada do Whisper Transcriber..."
    echo # Quebra de linha para espa√ßamento visual

    # Verificar se o Docker est√° em execu√ß√£o
    log_message "INFO" "Verificando o status do Docker..."
    if ! docker info &> /dev/null; then
        log_message "ERROR" "${RED}O Docker n√£o est√° em execu√ß√£o! Por favor, inicie o Docker Desktop/Daemon e tente novamente.${NC}"
        exit 1
    fi
    log_message "INFO" "${GREEN}Docker est√° em execu√ß√£o. √ìtimo!${NC}"
    echo # Quebra de linha para espa√ßamento visual

    # Criar a pasta de v√≠deos antes de tentar o build ou qualquer outra coisa
    if ! create_videos_directory; then
        log_message "ERROR" "${RED}Falha cr√≠tica ao criar/verificar a pasta de v√≠deos. Abortando.${NC}"
        exit 1
    fi
    echo # Quebra de linha para espa√ßamento visual

    # Tentar construir a imagem (apenas se n√£o existir)
    if ! build_docker_image; then
        log_message "ERROR" "${RED}Falha cr√≠tica no build da imagem Docker. Abortando.${NC}"
        exit 1
    fi
    echo # Quebra de linha para espa√ßamento visual

    create_aliases
    echo # Quebra de linha para espa√ßamento visual

    show_help # Exibe o help apenas se o build e a cria√ß√£o de aliases forem bem-sucedidos

    log_message "INFO" "Setup do Whisper Transcriber conclu√≠do com sucesso."
}

# Chama a fun√ß√£o principal
main